#pragma once
#include <iostream>
#include "Engine.cpp"
#include "include\SDL.h"
#include "include\SDL_image.h"
#include "include\SDL_ttf.h"
#include <array>
#include <vector>

class Graphics{

    public:

    std::vector<SDL_Texture*> textureArray;

    SDL_Texture* screenTexture;

    /** Creates a window.
     * \param flag SDL_CreateWindow flag. (SDL_WINDOW_VISIBLE)
     * \returns SDL_WINDOW pointer
     */
    SDL_Window* Create_Window(const char* title, int width, int height, int flag){
        SDL_Window *wind = SDL_CreateWindow(title,SDL_WINDOWPOS_CENTERED,SDL_WINDOWPOS_CENTERED, width,height, flag);
        return wind;
    }

    /** Creates a renderer for a window.
     * \param wind SDL_Window pointer, usually from Create_Window() function 
     * \returns SDL_Renderer pointer
     */
    SDL_Renderer* Create_Renderer(SDL_Window *wind){
        SDL_Renderer* rend = SDL_CreateRenderer(wind, -1,0);
        return rend;
    }


    /** Generates a SDL_Texture of the specified text and returns its pointer.
     * \param Renderer SDL_Renderer pointer used to generate texture from surface generated by the function.
     * \param Text Sets the text to be painted on the texture.
     * \param Font pointer of an TrueTypeFont, can be generated using TTF_OpenFont() SDL_ttf funciton.
     * \param Color the color of the text painted on the texture.
     * \returns SDL_Texture pointer.
     */
    SDL_Texture* text_Texture(SDL_Renderer* Renderer, const char* Text, TTF_Font *Font, SDL_Color Color){
        if(Font == NULL){std::cout << "text_Texture Error: "<< TTF_GetError() << std::endl;}
        SDL_Surface* temp = TTF_RenderText_Solid(Font, Text, Color);
        SDL_Texture* texture = SDL_CreateTextureFromSurface(Renderer, temp);
        if(texture == NULL){std::cout << "text_Texture Error: "<< SDL_GetError() << std::endl;}
        SDL_FreeSurface(temp);
        textureArray.push_back(texture);
        return texture;
    }

    //Used to initalized SDL_ttf, call this before any other TTF function.
    void init_TTF(){
        TTF_Init();
    }

    //Clears the render of a window with a rgba color.
    void window_clear(SDL_Renderer *rend, int r, int g, int b, int a){

        SDL_SetRenderDrawColor(rend,r,g,b,a);
        SDL_RenderClear(rend);
    }

    /** Calls SDL_DestroyWindow() function with the provided window pointer.
     * \param window SDL_Window pointer
     */
    void DestroyWindow(SDL_Window *window){
        SDL_DestroyWindow(window);
    }

    /** Draws a SDL_Texture onto a SDL_Renderer and also applies the Engine.scale parameter
    * \param img SDL_Texture pointer.
    * \param rend SDL_Renderer pointer.
    * \param srcRect SDL_Rect pointer used for character sheets/cropping the texture.
    * \param dstRect SDL_Rect pointer of the textures position on the screen.
    */
    void drawTexture(SDL_Texture* img, SDL_Renderer *rend, SDL_Rect* srcRect, SDL_Rect* dstRect){
        Engine engine = Engine();
        SDL_Rect scaleRec;
        scaleRec.x = dstRect->x*engine.scale;
        scaleRec.y = dstRect->y*engine.scale;
        scaleRec.w = dstRect->w*engine.scale;
        scaleRec.h = dstRect->h*engine.scale;

        if (SDL_RenderCopy(rend, img, srcRect,&scaleRec) != 0){
            std::cout << "drawTexture Error: " << SDL_GetError() << std::endl;
        }

    }

    /** Loads a image from a file supported by SDL, creates a texture from its surface. Adds the texture to the engines texture array for exit handling
    * \param path String path of the image. Static/Relative
    * \param rend SDL_Renderer pointer used to create the texture.
    * \return SDL_Texture pointer of the provided image.
    */
    SDL_Texture* loadTexture(const char *path, SDL_Renderer* rend){
        SDL_Surface* tmp = IMG_Load(path);
        SDL_Texture* loadedTexture = SDL_CreateTextureFromSurface(rend, tmp);
        SDL_FreeSurface(tmp);
        textureArray.push_back(loadedTexture);
    return loadedTexture;
    }

    /** Paints the buffered image of the renderer to the screen, using SDL_RednerPresent() function.
     * \param rend SDL_Renderer pointer.
    */
    void paint(SDL_Renderer* rend){
        SDL_RenderPresent(rend);
    }

    //Destroys the textures in the global textureArray.
    void quit(){
        for(int i = 0; i < textureArray.size(); i++){
            SDL_DestroyTexture(textureArray[i]);
        }
        delete this;
    }
};